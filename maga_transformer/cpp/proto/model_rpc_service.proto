// message.proto
syntax = "proto3";
import "google/protobuf/wrappers.proto";


message TensorPB {
    enum DataType {
        FP32 = 0;
        INT32 = 1;
        FP16 = 2;
        BF16 = 3;
    }
    DataType data_type = 1;
    repeated int64 shape = 2;
    bytes fp32_data = 3;
    bytes int32_data = 4;
    bytes fp16_data = 5;
    bytes bf16_data = 6;
}

message IntVector {
  repeated int32 values = 1;
}

message IntMatrix {
  repeated IntVector rows = 1;
}

message GenerateConfigPB {
    int32 max_new_tokens = 1;
    int32 num_beams = 2;
    int32 num_return_sequences = 3;
    int32 min_new_tokens = 4;

    int32 top_k = 5;
    float top_p = 6;
    float temperature = 7;
    float repetition_penalty = 8;
    google.protobuf.Int64Value random_seed = 9;
    google.protobuf.FloatValue top_p_decay = 10;
    google.protobuf.FloatValue top_p_min = 11;
    google.protobuf.Int32Value top_p_reset_ids = 12;
    google.protobuf.StringValue task_id = 13;
    int32 calculate_loss = 14;
    bool return_incremental = 15;
    bool return_hidden_states = 16;
    bool return_logits = 17;
    bool is_streaming = 18;
    int32 timeout_ms = 19;
    IntMatrix stop_words_list = 20;
    repeated int32 select_tokens_id = 21;
}

message GenerateInputPB {
    int64 request_id = 1;
    repeated int32 token_ids = 2;
    repeated string multimodal_urls = 3;
    int64 lora_id = 4;
    GenerateConfigPB generate_config = 5;
}

message AuxInfoPB {
    int32 cost_time_us = 1;
    int32 iter_count = 2;
    int32 input_len = 3;
    int32 reuse_len = 4;
    int32 prefix_len = 5;
    int32 output_len = 6;
    int32 fallback_tokens = 7;
    int32 fallback_times = 8;
    TensorPB cum_log_probs = 9;
}

message GenerateOutputPB {
    bool finished = 1;
    AuxInfoPB aux_info = 2;
    TensorPB output_ids = 3;
    TensorPB hidden_states = 4;
    TensorPB loss = 5;
    TensorPB logits = 6;
}

message GenerateOutputsPB {
    int64 request_id = 1;
    repeated GenerateOutputPB generate_outputs = 2;
}

message ErrorDetailsPB {
    int64 error_code = 1;
    string error_message = 2;
}

service ModelRpcService {
    rpc generate_stream(GenerateInputPB) returns (stream GenerateOutputsPB);
}
